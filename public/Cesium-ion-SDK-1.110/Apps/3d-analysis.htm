<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Use correct character set. -->
        <meta charset="utf-8" />
        <!-- Tell IE to use the latest, best version. -->
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <!-- Make the application on mobile take up the full browser screen and disable user scaling. -->
        <meta
            name="viewport"
            content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"
        />
        <title>3D Analysis</title>
        <script sync src="../../assets/scripts/polyfill.globalThis.js"></script>
        <script sync src="./3d-analysis-scripts-loader.js"></script>
    </head>
    <body>
        <div id="cesiumContainer">
          <template id="measurementsToolsDisclaimerTemplate">
            <div id="disclaimerContainer">
              <p id="disclaimerText"></p>
            </div>
          </template>
          <div data-bind="hidden: !tilesLoading" class="loader" id="progressBar">
            <div class="loaderBar"></div>
          </div>
        </div>
        <script>
            const viewModel = {
              tilesLoading: true
            };

            Cesium.knockout.track(viewModel);

            const MAXIMUM_SCREEN_SPACE_ERROR = 2;
            const CULL_REQUESTS_WHILE_MOVING_MULTIPLIER = 120;
            const DISCLAIMER_TEXT = window._env_.SHOULD_SHOW_PRECISION_DISCLAIMER;
            const BASE_MAPS = JSON.parse(window._env_.BASE_MAPS || '{}');
            
            const searchParams = new URLSearchParams(window.location.search.substring(1));
            const queryModelUrl = searchParams.get("modelUrl");
            const isDebugMode = JSON.parse(searchParams.get("debug") || 'false');
            
            const modelLoadingProgressBar = document.getElementById("progressBar");
            Cesium.knockout.applyBindings(viewModel, modelLoadingProgressBar);

            const terrainProviderUrl = window._env_.DEFAULT_TERRAIN_PROVIDER_URL;

            // ----- Viewer Config -----
            const viewer = new Cesium.Viewer("cesiumContainer", {
                imageryProvider: false,
                navigationHelpButton: false,
                geocoder: false,
                homeButton: true,
                infoBox: false,
                sceneModePicker: false,
                timeline: true,
                navigationInstructionsInitiallyVisible: false,
                scene3DOnly: true,
                baseLayerPicker: false,
            });

            setTimeout(()=>{
              viewer.animation.container.style.display = 'none';
              viewer.timeline.container.style.display = 'none';

              const zeroPad = (n, digits=2) => n.toString().padStart(digits, '0');
              viewer.animation.viewModel.timeFormatter = function(date, viewModel) {
                date = Cesium.JulianDate.toDate(date);
                return `${zeroPad(date.getHours())}:${zeroPad(date.getMinutes())}`;
              };
            },200);


            viewer.extend(Cesium.viewerMeasureMixin, {
                units: new Cesium.MeasureUnits({
                    distanceUnits: Cesium.DistanceUnits.METERS,
                    areaUnits: Cesium.AreaUnits.SQUARE_METERS,
                    volumeUnits: Cesium.VolumeUnits.CUBIC_METERS
                })
            });

            viewer.extend(Cesium.viewerCesiumNavigationMixin, {
              enableZoomControls: false
            });
            
            viewer.extend(CesiumSdkViewshedMixin, {
              publicUrl: window._env_.PUBLIC_URL,
              disablePick: !!viewer.measure.viewModel.selectedMeasurement
            });

            viewer.extend(CesiumBaseMapsPickerMixin, {
              baseMaps: BASE_MAPS,
            });

            // Observe measure tools
            Cesium.knockout.track(viewer.measure.viewModel);

            Cesium.knockout.getObservable(viewer.measure.viewModel, "selectedMeasurement").subscribe((value) => {
              viewer.viewshedTool.disablePick(!!value)
            });


            if(DISCLAIMER_TEXT.length > 0) {
              const disclaimerContainerTemplate = document.getElementById('measurementsToolsDisclaimerTemplate');
              const disclaimerContainer = disclaimerContainerTemplate.content.cloneNode(true);
              const disclaimerParagraph = disclaimerContainer.querySelector('#disclaimerText');
              disclaimerParagraph.innerHTML = DISCLAIMER_TEXT;

              // Set relative elements styles accordingly
              document.querySelector('#progressBar').classList.add('disclaimerVisible');
              document.querySelector('#viewshedConfigPanel').classList.add('disclaimerVisible');
              document.querySelector('.cesium-viewer-toolbar').classList.add('disclaimerVisible');

              viewer.container.appendChild(disclaimerContainer);
            }

            // 3D Inspector tool
            if(isDebugMode) {
              viewer.extend(Cesium.viewerCesium3DTilesInspectorMixin);
            }

             function applyCesiumAssetsForDev() {
              const terrain = Cesium.Terrain.fromWorldTerrain();
              viewer.scene.setTerrain(terrain);

              Cesium.Cesium3DTileset.fromIonAssetId(40866).then((tileset) => {
                tileset.enableDebugWireframe = isDebugMode;

                viewer.scene.primitives.add(tileset);
                viewer.zoomTo(tileset);

                overrideHomeButtonHandler(viewer, () => {
                  viewer.zoomTo(tileset);
                });
              });
            }

            // Uncomment for development
            // applyCesiumAssetsForDev();
            
            const canvas = viewer.canvas;

            viewer.scene.globe.shadows = Cesium.ShadowMode.ENABLED;
            viewer.scene.globe.depthTestAgainstTerrain = true;


            // ----- View Config -----

            try {
                if (terrainProviderUrl) {
                    // requestVertexNormals=true enables terrain lightening
                    addTerrainProvider(viewer, terrainProviderUrl, {requestVertexNormals: true});
                }
                if (queryModelUrl) {
                    const modelAddedCallback = (tileset) => {
                      if(tileset) {
                        overrideHomeButtonHandler(viewer, () => {
                          viewer.zoomTo(tileset);
                        });
                      }
                    };

                    const isModelLoaded = (isTilesLoaded) => {
                      viewModel.tilesLoading = !isTilesLoaded;
                      viewer.viewshedTool.setIsLoading(!isTilesLoaded);
                    };

                    add3DModel(viewer, queryModelUrl, {
                        maximumScreenSpaceError: MAXIMUM_SCREEN_SPACE_ERROR,
                        cullRequestsWhileMovingMultiplier: CULL_REQUESTS_WHILE_MOVING_MULTIPLIER,
                        preloadFlightDestinations: true,
                        preferLeaves: true,
                        skipLevelOfDetail: true,
                        dynamicScreenSpaceError: true,
                        immediatelyLoadDesiredLevelOfDetail: true,
                        foveatedTimeDelay: 0,
                        enableDebugWireframe: isDebugMode
                    }, true, modelAddedCallback, isModelLoaded);
                } else {
                  viewer.viewshedTool.setIsLoading(false);
                  viewModel.tilesLoading = false;
                }
            } catch (e) {
                console.error(e);
            }
        </script>
    </body>
</html>
